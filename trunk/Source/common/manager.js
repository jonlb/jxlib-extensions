/*
---

name: Jx.Manager

description: This class is used to create managers to control stores, widgets, or other components

license: MIT-style license.

requires:
 - Core/Class

provides: [Jx.Manager, Jx.StoreMgr]

...
 */
/**
 * Class: Jx.Manager
 * This class is used to create managers to 
 * control stores, widgets, or other components
 * 
 * Options:
 * type - What type of manager to create. 
 * 	 The framework automatically creates Jx.StoreMgr for stores
 *
 * Usage:
 * 	
 * > var mgr = new Jx.Manager({type:'myType'});
 * 
 */
Jx.Manager = new Class({
	
	Family: 'Jx.Manager',
	
	Implements: [Options, Events],
		
	options: {
		type:'generic'
	},
	
	
	list: null,
	count: 0,
	
	/**
	 * Constructor: Jx.Manager
	 * initializes the class
	 */
	initialize: function(options){
		this.setOptions(options);
		this.list = new Hash();
		window.addEvent('unload', this.destroyAll.bind(this));
	},
	
	/**
	 * Method: register
	 * Registers object with the manager
	 * 
	 * Paramaters:
	 * el - the object to register
	 * 
	 * Returns: 
	 * The id of the object (autogenerated if it doesn't already have one)
	 */
	register: function(el){
		if ($defined(el.options.id)) {
			id = el.options.id;
		} else {
			id = this._genId();
		}
		
		this.list.include(id,el);
		return id;
	},
	
	/**
	 * Method: destroy
	 * Removes an object from the manager
	 * 
	 * Parameters:
	 * id - the id of the object to remove
	 */
	destroy: function(id){
		if (this.list.has(id)) {
			el = this.list.get(id);
			if ($defined(el.destroy) && $type(el.destroy)==='function'){
				el.destroy();
			}
			this.list.erase(id);
		}
	},
	
	/**
	 * Method: destroyAll
	 * Removes all of the objects from the manager calling their individual
	 * destroy function.
	 */
	destroyAll: function(){
		this.list.each(function(value, key){
			this.destroy(key);
		},this);
	},
	
	/**
	 * Method: get
	 * Used to retrieve objects from the manager by ID
	 * 
	 * Parameters:
	 * id - the id of the object to retrieve
	 * 
	 * Returns:
	 * the object or null
	 */
	get: function(id){
		if (this.list.has(id)) {
			return this.list.get(id);
		} else {
			return null;
		}
	},
	
	/**
	 * Method: _genId
	 * Private function used to generate an id if an object doesn't have one
	 * 
	 * Returns:
	 * an autogenerated id
	 */
	_genId: function(){
		this.count++;
		return 'jx-'+this.options.type+'-'+this.count;
	}
});

/**
 * Section: Manager extensions
 */

/**
 * Object: Jx.StoreMgr
 * Store Manager
 * 
 * Extends:
 * Jx.Manager
 * 
 */
Jx.StoreMgr = new Jx.Manager({type:'store'});